// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  externalId String    @unique // Clerk user ID
  email      String    @unique
  name       String?
  image      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  projects   Project[]
}

model Project {
  id        String      @id @default(uuid())
  name      String
  slug      String      @unique
  userId    String
  user      User        @relation(fields: [userId], references: [externalId], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  apiKey    ApiKey?
  isDeleted Boolean     @default(false)
  errors    ErrorMeta[]
  sessions  Session[]
}

model ApiKey {
  id        String   @id @default(uuid())
  projectId String   @unique
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  key       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SessionUser {
  id        String    @id @default(uuid())
  name      String?
  email     String    @unique
  image     String?
  moreInfo  Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  sessions  Session[] @relation("SessionToSessionUser")
}

model Session {
  id            String      @id @default(uuid())
  status        String
  projectId     String
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  source        String
  environment   String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  sessionUserId String
  sessionUser   SessionUser @relation(fields: [sessionUserId], references: [id], onDelete: Cascade, name: "SessionToSessionUser")
  errors        ErrorMeta[] @relation("ErrorMetaToSession")
}

model ErrorMeta {
  id          String   @id @default(uuid())
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade, name: "ErrorMetaToSession")
  timestamp   String
  message     String
  occurrences Int      @default(1)
  level       String
  traceId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
